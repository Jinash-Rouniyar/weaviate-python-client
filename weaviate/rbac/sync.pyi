from typing import List, Optional, Union, Dict
from weaviate.rbac.roles import _RolesBase
from weaviate.rbac.models import Permissions, Role, User

class _Roles(_RolesBase):
    def list_all(self) -> Dict[str, Role]: ...
    def get_current_roles(self) -> Dict[str, Role]: ...
    def by_name(self, role: str) -> Optional[Role]: ...
    def by_user(self, user: str) -> Dict[str, Role]: ...
    def users(self, role: str) -> Dict[str, User]: ...
    def delete(self, role: str) -> None: ...
    def create(self, *, name: str, permissions: Permissions) -> Role: ...
    def assign(self, *, roles: Union[str, List[str]], user: str) -> None: ...
    def revoke(self, *, roles: Union[str, List[str]], user: str) -> None: ...
    def add_permissions(self, *, permissions: Permissions, role: str) -> None: ...
    def remove_permissions(self, *, permissions: Permissions, role: str) -> None: ...
